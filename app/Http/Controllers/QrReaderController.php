<?php

namespace App\Http\Controllers;

use Illuminate\Http\Request;
use App\Models\Ticket;
use Illuminate\Support\Facades\Log;
use Illuminate\Support\Facades\Schema;

class QrReaderController
{
    public function validateQrCode(Request $request)
    {
        try {
            // Validate the incoming request
            $request->validate([
                'qrCode' => 'required|string',
            ]);

            $qrCode = $request->input('qrCode');
            Log::info("Validating QR code: {$qrCode}");

            // Parse the QR code if it's JSON (as generated by our system)
            $qrData = $this->parseQrCode($qrCode);

            if ($qrData && isset($qrData['ticket_code'])) {
                $ticketCode = $qrData['ticket_code'];
            } else {
                // If not JSON, use the raw QR code
                $ticketCode = $qrCode;
            }

            // Query the tickets table for the QR code
            $ticket = Ticket::where('qr_code', $ticketCode)->first();
            $isValid = $ticket !== null;

            Log::info("QR code validation result: " . ($isValid ? 'Valid' : 'Invalid'));

            // Check if ticket has is_used field, otherwise default to false
            $isUsed = false;
            if ($ticket && Schema::hasColumn('tickets', 'is_used')) {
                $isUsed = $ticket->is_used ?? false;
            }

            return response()->json([
                'valid' => $isValid,
                'ticket_code' => $ticketCode,
                'already_used' => $isUsed
            ]);

        } catch (\Exception $e) {
            Log::error("QR validation error: " . $e->getMessage());
            return response()->json([
                'valid' => false,
                'error' => 'Validation failed'
            ], 500);
        }
    }

    public function fetchTicketDetails(Request $request)
    {
        try {
            // Validate the incoming request
            $request->validate([
                'qrCode' => 'required|string',
            ]);

            $qrCode = $request->input('qrCode');
            Log::info("Fetching ticket details for QR code: {$qrCode}");

            // Parse the QR code if it's JSON
            $qrData = $this->parseQrCode($qrCode);

            if ($qrData && isset($qrData['ticket_code'])) {
                $ticketCode = $qrData['ticket_code'];
            } else {
                $ticketCode = $qrCode;
            }

            // Query the ticket with festival relationship (not event)
            $ticket = Ticket::with(['festival', 'order'])->where('qr_code', $ticketCode)->first();

            if (!$ticket) {
                Log::info("Ticket not found for code: {$ticketCode}");
                return response()->json([
                    'ticket' => null,
                    'festival' => null,
                    'valid' => false,
                    'message' => 'Ticket not found'
                ]);
            }

            Log::info("Ticket found: {$ticket->qr_code}, Festival: {$ticket->festival->name}");

            // Check if ticket has is_used, used_at, and redeemed_by fields
            $isUsed = false;
            $usedAt = null;
            $redeemedBy = null;

            if (Schema::hasColumn('tickets', 'is_used')) {
                $isUsed = $ticket->is_used ?? false;
            }

            if (Schema::hasColumn('tickets', 'used_at')) {
                $usedAt = $ticket->used_at;
            }

            if (Schema::hasColumn('tickets', 'redeemed_by')) {
                $redeemedBy = $ticket->redeemed_by;
            }

            // Get customer name safely
            $customerName = 'N/A';
            if ($ticket->order) {
                if (is_string($ticket->order->payment_details)) {
                    $paymentDetails = json_decode($ticket->order->payment_details, true);
                    $customerName = $paymentDetails['customer_name'] ?? 'N/A';
                } elseif (is_array($ticket->order->payment_details)) {
                    $customerName = $ticket->order->payment_details['customer_name'] ?? 'N/A';
                }
            }

            return response()->json([
                'ticket' => [
                    'id' => $ticket->id,
                    'qr_code' => $ticket->qr_code,
                    'price' => $ticket->price_per_ticket,
                    'is_used' => $isUsed,
                    'used_at' => $usedAt,
                    'redeemed_by' => $redeemedBy,
                    'order_id' => $ticket->order_id,
                ],
                'festival' => [
                    'id' => $ticket->festival->id,
                    'name' => $ticket->festival->name,
                    'description' => $ticket->festival->description,
                    'date' => $ticket->festival->date ?? null,
                    'time_slot' => $ticket->festival->time_slot,
                ],
                'order' => [
                    'id' => $ticket->order->id,
                    'customer_name' => $customerName,
                    'ordered_at' => $ticket->order->ordered_at,
                ],
                'valid' => true,
                'already_used' => $isUsed,
            ]);

        } catch (\Exception $e) {
            Log::error("Error fetching ticket details: " . $e->getMessage());
            Log::error("Stack trace: " . $e->getTraceAsString());
            return response()->json([
                'ticket' => null,
                'festival' => null,
                'valid' => false,
                'error' => 'Failed to fetch ticket details'
            ], 500);
        }
    }

    public function redeemTicket(Request $request)
    {
        try {
            $request->validate([
                'qrCode' => 'required|string',
            ]);

            $qrCode = $request->input('qrCode');
            Log::info("Attempting to redeem ticket: {$qrCode}");

            // Parse QR code
            $qrData = $this->parseQrCode($qrCode);
            $ticketCode = $qrData && isset($qrData['ticket_code']) ? $qrData['ticket_code'] : $qrCode;

            // Find the ticket
            $ticket = Ticket::where('qr_code', $ticketCode)->first();

            if (!$ticket) {
                return response()->json([
                    'success' => false,
                    'message' => 'Ticket not found'
                ], 404);
            }

            // Check if the tickets table has redemption columns
            $hasIsUsedColumn = Schema::hasColumn('tickets', 'is_used');
            $hasUsedAtColumn = Schema::hasColumn('tickets', 'used_at');
            $hasRedeemedByColumn = Schema::hasColumn('tickets', 'redeemed_by');

            if (!$hasIsUsedColumn) {
                // If no is_used column exists, we need to add it to the database
                // For now, return success but log that the column is missing
                Log::warning("Tickets table missing 'is_used' column. Cannot track ticket redemption status.");
                return response()->json([
                    'success' => true,
                    'message' => 'Ticket processed (redemption tracking unavailable)',
                    'redeemed_at' => now()
                ]);
            }

            // Check if already used
            if ($ticket->is_used) {
                return response()->json([
                    'success' => false,
                    'message' => 'Ticket has already been used',
                    'used_at' => $hasUsedAtColumn ? $ticket->used_at : null,
                    'redeemed_by' => $hasRedeemedByColumn ? $ticket->redeemed_by : null
                ]);
            }

            // Mark ticket as used
            $updateData = ['is_used' => true];
            if ($hasUsedAtColumn) {
                $updateData['used_at'] = now();
            }
            if ($hasRedeemedByColumn) {
                // You can get this from auth user or pass it as parameter
                $updateData['redeemed_by'] = auth()->user()->firstName ?? 'System';
            }

            $ticket->update($updateData);

            Log::info("Ticket redeemed successfully: {$ticketCode}");

            return response()->json([
                'success' => true,
                'message' => 'Ticket redeemed successfully',
                'redeemed_at' => $hasUsedAtColumn ? $ticket->used_at : now(),
                'redeemed_by' => $hasRedeemedByColumn ? $ticket->redeemed_by : null
            ]);

        } catch (\Exception $e) {
            Log::error("Error redeeming ticket: " . $e->getMessage());
            Log::error("Stack trace: " . $e->getTraceAsString());
            return response()->json([
                'success' => false,
                'error' => 'Failed to redeem ticket'
            ], 500);
        }
    }

    private function parseQrCode($qrCode)
    {
        try {
            // Try to decode as JSON (our QR codes are JSON)
            $decoded = json_decode($qrCode, true);
            return $decoded;
        } catch (\Exception $e) {
            // If not JSON, return null
            return null;
        }
    }
}
