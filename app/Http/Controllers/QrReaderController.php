<?php

namespace App\Http\Controllers;

use Illuminate\Http\Request;
use App\Models\Ticket;
use Illuminate\Support\Facades\Log;

class QrReaderController
{
    public function validateQrCode(Request $request)
    {
        try {
            // Validate the incoming request
            $request->validate([
                'qrCode' => 'required|string',
            ]);

            $qrCode = $request->input('qrCode');
            Log::info("Validating QR code: {$qrCode}");

            // Parse the QR code if it's JSON (as generated by our system)
            $qrData = $this->parseQrCode($qrCode);

            if ($qrData && isset($qrData['ticket_code'])) {
                $ticketCode = $qrData['ticket_code'];
            } else {
                // If not JSON, use the raw QR code
                $ticketCode = $qrCode;
            }

            // Query the tickets table for the QR code
            $ticket = Ticket::where('qr_code', $ticketCode)->first();
            $isValid = $ticket !== null;

            Log::info("QR code validation result: " . ($isValid ? 'Valid' : 'Invalid'));

            return response()->json([
                'valid' => $isValid,
                'ticket_code' => $ticketCode,
                'already_used' => $ticket ? $ticket->is_used : false
            ]);

        } catch (\Exception $e) {
            Log::error("QR validation error: " . $e->getMessage());
            return response()->json([
                'valid' => false,
                'error' => 'Validation failed'
            ], 500);
        }
    }

    public function fetchTicketDetails(Request $request)
    {
        try {
            // Validate the incoming request
            $request->validate([
                'qrCode' => 'required|string',
            ]);

            $qrCode = $request->input('qrCode');
            Log::info("Fetching ticket details for QR code: {$qrCode}");

            // Parse the QR code if it's JSON
            $qrData = $this->parseQrCode($qrCode);

            if ($qrData && isset($qrData['ticket_code'])) {
                $ticketCode = $qrData['ticket_code'];
            } else {
                $ticketCode = $qrCode;
            }

            // Query the ticket with festival relationship (not event)
            $ticket = Ticket::with(['festival', 'order'])->where('qr_code', $ticketCode)->first();

            if (!$ticket) {
                Log::info("Ticket not found for code: {$ticketCode}");
                return response()->json([
                    'ticket' => null,
                    'festival' => null,
                    'valid' => false,
                    'message' => 'Ticket not found'
                ]);
            }

            Log::info("Ticket found: {$ticket->qr_code}, Festival: {$ticket->festival->name}");

            return response()->json([
                'ticket' => [
                    'id' => $ticket->id,
                    'qr_code' => $ticket->qr_code,
                    'price' => $ticket->price_per_ticket,
                    'is_used' => $ticket->is_used ?? false,
                    'order_id' => $ticket->order_id,
                ],
                'festival' => [
                    'id' => $ticket->festival->id,
                    'name' => $ticket->festival->name,
                    'description' => $ticket->festival->description,
                    'date' => $ticket->festival->date,
                    'time_slot' => $ticket->festival->time_slot,
                ],
                'order' => [
                    'id' => $ticket->order->id,
                    'customer_name' => $ticket->order->payment_details['customer_name'] ?? 'N/A',
                    'ordered_at' => $ticket->order->ordered_at,
                ],
                'valid' => true,
                'already_used' => $ticket->is_used ?? false,
            ]);

        } catch (\Exception $e) {
            Log::error("Error fetching ticket details: " . $e->getMessage());
            return response()->json([
                'ticket' => null,
                'festival' => null,
                'valid' => false,
                'error' => 'Failed to fetch ticket details'
            ], 500);
        }
    }

    public function redeemTicket(Request $request)
    {
        try {
            $request->validate([
                'qrCode' => 'required|string',
            ]);

            $qrCode = $request->input('qrCode');
            Log::info("Attempting to redeem ticket: {$qrCode}");

            // Parse QR code
            $qrData = $this->parseQrCode($qrCode);
            $ticketCode = $qrData && isset($qrData['ticket_code']) ? $qrData['ticket_code'] : $qrCode;

            // Find the ticket
            $ticket = Ticket::where('qr_code', $ticketCode)->first();

            if (!$ticket) {
                return response()->json([
                    'success' => false,
                    'message' => 'Ticket not found'
                ], 404);
            }

            if ($ticket->is_used) {
                return response()->json([
                    'success' => false,
                    'message' => 'Ticket has already been used',
                    'used_at' => $ticket->used_at
                ]);
            }

            // Mark ticket as used
            $ticket->is_used = true;
            $ticket->used_at = now();
            $ticket->save();

            Log::info("Ticket redeemed successfully: {$ticketCode}");

            return response()->json([
                'success' => true,
                'message' => 'Ticket redeemed successfully',
                'redeemed_at' => $ticket->used_at
            ]);

        } catch (\Exception $e) {
            Log::error("Error redeeming ticket: " . $e->getMessage());
            return response()->json([
                'success' => false,
                'error' => 'Failed to redeem ticket'
            ], 500);
        }
    }

    private function parseQrCode($qrCode)
    {
        try {
            // Try to decode as JSON (our QR codes are JSON)
            $decoded = json_decode($qrCode, true);
            return $decoded;
        } catch (\Exception $e) {
            // If not JSON, return null
            return null;
        }
    }
}
